generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id         String       @id @default(cuid())
  clerk_id   String
  fullName   String
  imageUrl   String?
  email      String?
  createdAt  DateTime?    @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime?
  apikeys    apikeys[]
  flows      flows[]
  workspaces workspaces[]
  threads    threads[]
  llmmodels  llmmodels[]
  prompts    prompts[]
  files      files[]
}

model organizations {
  id            String      @id @default(cuid())
  clerk_id      String?
  name          String
  license       LicenseType
  flow_endpoint String?
  createdAt     DateTime?   @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime?
  llmmodels     llmmodels[]
  prompts       prompts[]
}

model apikeys {
  id            String     @id @default(cuid())
  client_id     String
  client_secret String
  permissions   String
  workspaceId   String
  name          String?
  createdAt     DateTime?  @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime?
  workspaces    workspaces @relation(fields: [workspaceId], references: [id])
  creator       users?     @relation(fields: [creatorId], references: [id])
  creatorId     String?
}

model flows {
  id          String     @id @default(cuid())
  description String?
  endpoint    String
  apikey      String
  tags        String?
  type        FlowTypes  @default(TEXTGEN)
  workspaceId String
  name        String
  createdAt   DateTime?  @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime?
  workspaces  workspaces @relation(fields: [workspaceId], references: [id])
  creator     users?     @relation(fields: [creatorId], references: [id])
  creatorId   String?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model workspaces {
  id          String  @id @default(cuid())
  name        String
  description String?
  slug        String

  isPrivate Boolean   @default(false)
  createdAt DateTime? @default(now())
  deletedAt DateTime?
  updatedAt DateTime?
  ownerId   String?   @db.VarChar
  apikeys   apikeys[]
  flows     flows[]
  threads   threads[]
  creator   users?    @relation(fields: [creatorId], references: [id])
  creatorId String?
  files     files[]
}

model threads {
  id          String     @id @default(cuid())
  name        String?
  link        String
  threadId    String?
  createdAt   DateTime?  @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime?
  workspaceId String
  workspaces  workspaces @relation(fields: [workspaceId], references: [id])
  llmmodel    llmmodels? @relation(fields: [llmmodelId], references: [id])
  llmmodelId  String?
  promptId    String?
  prompt      prompts?   @relation(fields: [promptId], references: [id])
  creatorId   String?
  creator     users?     @relation(fields: [creatorId], references: [id])
}

model llmmodels {
  id             String        @id @default(cuid())
  name           String?
  source         ModelTypes    @default(OPENAI)
  replicate_url  String?
  apikey         String?
  createdAt      DateTime?     @default(now())
  deletedAt      DateTime?
  updatedAt      DateTime?
  organizationId String
  organization   organizations @relation(fields: [organizationId], references: [id])
  creator        users?        @relation(fields: [creatorId], references: [id])
  creatorId      String?
  threads        threads[]
}

model prompts {
  id             String        @id @default(cuid())
  name           String?
  prompt         String
  createdAt      DateTime?     @default(now())
  deletedAt      DateTime?
  updatedAt      DateTime?
  isPrivate      Boolean       @default(false)
  organizationId String
  organization   organizations @relation(fields: [organizationId], references: [id])
  creator        users?        @relation(fields: [creatorId], references: [id])
  creatorId      String?
  threads        threads[]
}

model files {
  id          String         @id @default(cuid())
  filename    String
  oai_fileid  String?
  status      FileStatusType @default(PROCESSING)
  createdAt   DateTime?      @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime?
  workspaceId String
  workspaces  workspaces     @relation(fields: [workspaceId], references: [id])
  creator     users?         @relation(fields: [creatorId], references: [id])
  creatorId   String?

  @@unique([filename, workspaceId], name:"workspaceId_filename")
}


enum FileStatusType {
  PROCESSING
  INDEXED
  ERROR
  UNPROCESSED
}

enum LicenseType {
  SOLO
  TEAM
  PRO
}

enum ModelTypes {
  OPENAI
  ANTHROPIC
  COHERE
  GEMINI
  MISTRAL
  LLAMA3
  CUSTOM
}

enum FlowTypes {
  OPENAI
  ANTHROPIC
  GEMINI
  IMAGEGEN
  TEXTGEN
  AGENT
  CODEGEN
  CODEINTEPRETER
  RAG
  OTHERML
}
