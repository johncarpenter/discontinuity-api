import { useState } from "react";
import { ArrowTopRightOnSquareIcon } from "@heroicons/react/24/outline";
import { getSession } from "next-auth/react";
import Link from "next/link";
import toast from "react-hot-toast";

import Button from "@/components/Button/index";
import Card from "@/components/Card/index";
import Content from "@/components/Content/index";
import Meta from "@/components/Meta/index";
import { useApiKeys } from "@/hooks/data";
import { AccountLayout } from "@/layouts/index";
import api from "@/lib/common/api";
import { getWorkspace, isWorkspaceOwner } from "@/prisma/services/workspace";

const ApiKeys = ({ isTeamOwner, workspace }) => {
  const { data, isLoading } = useApiKeys(workspace.slug);
  const [keyname, setKeyname] = useState("");
  const [isSubmitting, setSubmittingState] = useState(false);

  const addApiKey = (event) => {
    event.preventDefault();
    setSubmittingState(true);
    api(`/api/workspace/${workspace.slug}/apikey`, {
      body: { permissions: "user", name: keyname },
      method: "POST",
    }).then((response) => {
      setSubmittingState(false);

      if (response.errors) {
        Object.keys(response.errors).forEach((error) =>
          toast.error(response.errors[error].msg)
        );
      } else {
        setKeyname("");
        toast.success("apikey successfully added to workspace!");
      }
    });
  };

  const handleapikeyChange = (event) => setKeyname(event.target.value);

  const refresh = (apikey, verified) => {
    setSubmittingState(true);

    api(`/api/workspace/${workspace.slug}/apikey`, {
      body: { permissions: "user" },
      method: "POST",
    }).then((response) => {
      setSubmittingState(false);

      if (response.errors) {
        Object.keys(response.errors).forEach((error) =>
          toast.error(response.errors[error].msg)
        );
      } else {
        toast.success("apikey successfully verified!");
      }
    });

    return verified;
  };

  const remove = (apikey) => {
    api(`/api/workspace/${workspace.slug}/apikey`, {
      body: { id: apikey.id },
      method: "DELETE",
    }).then((response) => {
      if (response.errors) {
        Object.keys(response.errors).forEach((error) =>
          toast.error(response.errors[error].msg)
        );
      } else {
        toast.success("apikey successfully deleted from workspace!");
      }
    });
  };

  return (
    <AccountLayout>
      <Meta title={`${workspace.name} | API Keys`} />
      <Content.Title
        title="API Key Management"
        subtitle="Active API Keys for your workspace"
      />
      <Content.Divider />
      <Content.Container>
        {isLoading ? (
          <span>loading</span>
        ) : data?.apikeys.length > 0 ? (
          data.apikeys.map((apikey, index) => (
            <Card.Body key={index}>{JSON.stringify(apikey, null, 2)}</Card.Body>
          ))
        ) : (
          <Content.Empty>
            API Keys can be generated by the Workspace Owner.{" "}
          </Content.Empty>
        )}
      </Content.Container>
      {isTeamOwner && (
        <>
          <Content.Divider thick />
          <Content.Container>
            <Card>
              <form>
                <Card.Body
                  title="Generate New API Key"
                  subtitle="API Keys are assigned to each workspace"
                >
                  <input
                    className="px-3 py-2 border rounded md:w-1/2"
                    disabled={isSubmitting}
                    onChange={handleapikeyChange}
                    placeholder="API Key Name"
                    type="text"
                    value={keyname}
                  />
                </Card.Body>
                <Card.Footer>
                  <span />
                  <Button
                    className="text-white bg-blue-600 hover:bg-blue-500"
                    disabled={isSubmitting}
                    onClick={addApiKey}
                  >
                    Add
                  </Button>
                </Card.Footer>
              </form>
            </Card>
          </Content.Container>
        </>
      )}
    </AccountLayout>
  );
};

export const getServerSideProps = async (context) => {
  const session = await getSession(context);
  let isTeamOwner = false;
  let workspace = null;

  if (session) {
    workspace = await getWorkspace(
      session.user.userId,
      session.user.email,
      context.params.workspaceSlug
    );

    if (workspace) {
      const { host } = new URL(process.env.APP_URL);
      isTeamOwner = isWorkspaceOwner(session.user.email, workspace);
      workspace.host = host;
      workspace.hostname = `${workspace.slug}.${host}`;
    }
  }

  return {
    props: {
      isTeamOwner,
      workspace,
    },
  };
};

export default ApiKeys;
